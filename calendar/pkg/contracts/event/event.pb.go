// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event/event.proto

package event

import (
	context "context"
	fmt "fmt"
	request "github.com/dmirou/otusgo/calendar/pkg/contracts/request"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Event struct {
	Id                   string               `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId               string               `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Title                string               `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Desc                 string               `protobuf:"bytes,4,opt,name=desc,proto3" json:"desc,omitempty"`
	Start                *timestamp.Timestamp `protobuf:"bytes,5,opt,name=start,proto3" json:"start,omitempty"`
	End                  *timestamp.Timestamp `protobuf:"bytes,6,opt,name=end,proto3" json:"end,omitempty"`
	NotifyBefore         *duration.Duration   `protobuf:"bytes,7,opt,name=notify_before,json=notifyBefore,proto3" json:"notify_before,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Event) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *Event) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Event) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Event) GetStart() *timestamp.Timestamp {
	if m != nil {
		return m.Start
	}
	return nil
}

func (m *Event) GetEnd() *timestamp.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *Event) GetNotifyBefore() *duration.Duration {
	if m != nil {
		return m.NotifyBefore
	}
	return nil
}

type ListEventsPerDateRequest struct {
	Date                 *timestamp.Timestamp `protobuf:"bytes,1,opt,name=date,proto3" json:"date,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ListEventsPerDateRequest) Reset()         { *m = ListEventsPerDateRequest{} }
func (m *ListEventsPerDateRequest) String() string { return proto.CompactTextString(m) }
func (*ListEventsPerDateRequest) ProtoMessage()    {}
func (*ListEventsPerDateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{1}
}

func (m *ListEventsPerDateRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEventsPerDateRequest.Unmarshal(m, b)
}
func (m *ListEventsPerDateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEventsPerDateRequest.Marshal(b, m, deterministic)
}
func (m *ListEventsPerDateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEventsPerDateRequest.Merge(m, src)
}
func (m *ListEventsPerDateRequest) XXX_Size() int {
	return xxx_messageInfo_ListEventsPerDateRequest.Size(m)
}
func (m *ListEventsPerDateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEventsPerDateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListEventsPerDateRequest proto.InternalMessageInfo

func (m *ListEventsPerDateRequest) GetDate() *timestamp.Timestamp {
	if m != nil {
		return m.Date
	}
	return nil
}

type ListEventsResponse struct {
	Events               []*Event `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListEventsResponse) Reset()         { *m = ListEventsResponse{} }
func (m *ListEventsResponse) String() string { return proto.CompactTextString(m) }
func (*ListEventsResponse) ProtoMessage()    {}
func (*ListEventsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_510ac585eaa75cc0, []int{2}
}

func (m *ListEventsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListEventsResponse.Unmarshal(m, b)
}
func (m *ListEventsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListEventsResponse.Marshal(b, m, deterministic)
}
func (m *ListEventsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListEventsResponse.Merge(m, src)
}
func (m *ListEventsResponse) XXX_Size() int {
	return xxx_messageInfo_ListEventsResponse.Size(m)
}
func (m *ListEventsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListEventsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListEventsResponse proto.InternalMessageInfo

func (m *ListEventsResponse) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*Event)(nil), "event.Event")
	proto.RegisterType((*ListEventsPerDateRequest)(nil), "event.ListEventsPerDateRequest")
	proto.RegisterType((*ListEventsResponse)(nil), "event.ListEventsResponse")
}

func init() {
	proto.RegisterFile("event/event.proto", fileDescriptor_510ac585eaa75cc0)
}

var fileDescriptor_510ac585eaa75cc0 = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xdf, 0x6b, 0xd4, 0x40,
	0x10, 0xc7, 0xb9, 0x1f, 0xb9, 0xe2, 0xe4, 0xaa, 0x74, 0xf1, 0x47, 0x1a, 0x41, 0x8f, 0xc3, 0x87,
	0x2b, 0x4a, 0x22, 0xa7, 0x22, 0xf8, 0xa0, 0x72, 0x5e, 0x91, 0x8a, 0x42, 0x89, 0x8a, 0xe0, 0x4b,
	0xd9, 0xcb, 0xce, 0xa5, 0x4b, 0x2f, 0xd9, 0xb8, 0x3b, 0x29, 0xdc, 0xdf, 0xe0, 0x7f, 0xec, 0x93,
	0x64, 0x37, 0x87, 0x6d, 0x4e, 0xb4, 0x7d, 0x49, 0x32, 0xdf, 0xf9, 0xcc, 0xec, 0xe4, 0x3b, 0x09,
	0xec, 0xe1, 0x39, 0x16, 0x14, 0xdb, 0x6b, 0x54, 0x6a, 0x45, 0x8a, 0x79, 0x36, 0x08, 0xef, 0x67,
	0x4a, 0x65, 0x2b, 0x8c, 0xad, 0xb8, 0xa8, 0x96, 0x31, 0xe6, 0x25, 0xad, 0x1d, 0x13, 0x3e, 0x68,
	0x27, 0x45, 0xa5, 0x39, 0x49, 0x55, 0x34, 0xf9, 0x87, 0xed, 0x3c, 0xc9, 0x1c, 0x0d, 0xf1, 0xbc,
	0x6c, 0x80, 0x3b, 0x1a, 0x7f, 0x54, 0x68, 0x28, 0x6e, 0xee, 0x4e, 0x1e, 0xff, 0xea, 0x80, 0x77,
	0x58, 0x1f, 0xcf, 0x6e, 0x42, 0x57, 0x8a, 0xa0, 0x33, 0xea, 0x4c, 0x6e, 0x24, 0x5d, 0x29, 0xd8,
	0x3d, 0xd8, 0xa9, 0x0c, 0xea, 0x13, 0x29, 0x82, 0xae, 0x15, 0x07, 0x75, 0x78, 0x24, 0xd8, 0x6d,
	0xf0, 0x48, 0xd2, 0x0a, 0x83, 0x9e, 0x95, 0x5d, 0xc0, 0x18, 0xf4, 0x05, 0x9a, 0x34, 0xe8, 0x5b,
	0xd1, 0x3e, 0xb3, 0xa7, 0xe0, 0x19, 0xe2, 0x9a, 0x02, 0x6f, 0xd4, 0x99, 0xf8, 0xd3, 0x30, 0x72,
	0x43, 0x46, 0x9b, 0x21, 0xa3, 0x2f, 0x9b, 0x21, 0x13, 0x07, 0xb2, 0x27, 0xd0, 0xc3, 0x42, 0x04,
	0x83, 0xff, 0xf2, 0x35, 0xc6, 0x5e, 0xc3, 0x6e, 0xa1, 0x48, 0x2e, 0xd7, 0x27, 0x0b, 0x5c, 0x2a,
	0x8d, 0xc1, 0x8e, 0xad, 0xdb, 0xdf, 0xaa, 0x9b, 0x37, 0x66, 0x25, 0x43, 0xc7, 0xcf, 0x2c, 0x3e,
	0xfe, 0x00, 0xc1, 0x47, 0x69, 0xc8, 0xbe, 0xbf, 0x39, 0x46, 0x3d, 0xe7, 0x84, 0x89, 0xb3, 0x87,
	0x45, 0xd0, 0x17, 0x9c, 0xd0, 0x1a, 0xf2, 0xef, 0x51, 0x2c, 0x37, 0x7e, 0x05, 0xec, 0x4f, 0xaf,
	0x04, 0x4d, 0xa9, 0x0a, 0x83, 0xec, 0x11, 0x0c, 0xec, 0x72, 0x4d, 0xd0, 0x19, 0xf5, 0x26, 0xfe,
	0x74, 0x18, 0xb9, 0xc5, 0x5b, 0x2c, 0x69, 0x72, 0xd3, 0x9f, 0x3d, 0x18, 0x5a, 0xe5, 0x33, 0xea,
	0x73, 0x99, 0x22, 0x3b, 0x00, 0xff, 0x9d, 0x46, 0x4e, 0xe8, 0x56, 0x73, 0xa9, 0x2a, 0xbc, 0x14,
	0xb1, 0xc7, 0x30, 0x7c, 0x8f, 0xee, 0xd8, 0xd9, 0xfa, 0x68, 0xce, 0x76, 0xa3, 0xcd, 0x82, 0xeb,
	0xb0, 0x05, 0x1f, 0x80, 0xff, 0xb5, 0x14, 0x57, 0xea, 0xfb, 0x1c, 0xfc, 0x39, 0xae, 0x70, 0x83,
	0xb6, 0xda, 0xde, 0xdd, 0xf2, 0xe3, 0xb0, 0xfe, 0x58, 0xd9, 0x1b, 0xd8, 0xdb, 0x72, 0x94, 0xdd,
	0xba, 0x50, 0x5b, 0x0b, 0xe1, 0x7e, 0x73, 0xd2, 0x5f, 0x0c, 0x6b, 0x37, 0xf8, 0x86, 0x78, 0x76,
	0xad, 0x06, 0x6f, 0x2f, 0xee, 0xe1, 0x18, 0xf5, 0x27, 0x55, 0xd0, 0xe9, 0x75, 0x3a, 0xcc, 0x5e,
	0x7e, 0x7f, 0x91, 0x49, 0x3a, 0xad, 0x16, 0x51, 0xaa, 0xf2, 0x58, 0xe4, 0x52, 0xab, 0x2a, 0x56,
	0x54, 0x99, 0x4c, 0xc5, 0x29, 0x5f, 0x61, 0x21, 0xb8, 0x8e, 0xcb, 0xb3, 0x2c, 0x4e, 0x55, 0x41,
	0x9a, 0xa7, 0x64, 0xdc, 0xdf, 0xbc, 0x18, 0x58, 0x33, 0x9e, 0xfd, 0x0e, 0x00, 0x00, 0xff, 0xff,
	0x01, 0xc8, 0x48, 0x46, 0xe3, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	GetEventByID(ctx context.Context, in *request.ByID, opts ...grpc.CallOption) (*Event, error)
	UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
	DeleteEvent(ctx context.Context, in *request.ByID, opts ...grpc.CallOption) (*empty.Empty, error)
	ListEventsPerDate(ctx context.Context, in *request.ByDate, opts ...grpc.CallOption) (*ListEventsResponse, error)
	ListEventsPerWeek(ctx context.Context, in *request.ByDate, opts ...grpc.CallOption) (*ListEventsResponse, error)
	ListEventsPerMonth(ctx context.Context, in *request.ByDate, opts ...grpc.CallOption) (*ListEventsResponse, error)
}

type eventServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventServiceClient(cc grpc.ClientConnInterface) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) CreateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/event.EventService/CreateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) GetEventByID(ctx context.Context, in *request.ByID, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/event.EventService/GetEventByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, "/event.EventService/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) DeleteEvent(ctx context.Context, in *request.ByID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/event.EventService/DeleteEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ListEventsPerDate(ctx context.Context, in *request.ByDate, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, "/event.EventService/ListEventsPerDate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ListEventsPerWeek(ctx context.Context, in *request.ByDate, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, "/event.EventService/ListEventsPerWeek", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) ListEventsPerMonth(ctx context.Context, in *request.ByDate, opts ...grpc.CallOption) (*ListEventsResponse, error) {
	out := new(ListEventsResponse)
	err := c.cc.Invoke(ctx, "/event.EventService/ListEventsPerMonth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	CreateEvent(context.Context, *Event) (*Event, error)
	GetEventByID(context.Context, *request.ByID) (*Event, error)
	UpdateEvent(context.Context, *Event) (*Event, error)
	DeleteEvent(context.Context, *request.ByID) (*empty.Empty, error)
	ListEventsPerDate(context.Context, *request.ByDate) (*ListEventsResponse, error)
	ListEventsPerWeek(context.Context, *request.ByDate) (*ListEventsResponse, error)
	ListEventsPerMonth(context.Context, *request.ByDate) (*ListEventsResponse, error)
}

// UnimplementedEventServiceServer can be embedded to have forward compatible implementations.
type UnimplementedEventServiceServer struct {
}

func (*UnimplementedEventServiceServer) CreateEvent(ctx context.Context, req *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEvent not implemented")
}
func (*UnimplementedEventServiceServer) GetEventByID(ctx context.Context, req *request.ByID) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEventByID not implemented")
}
func (*UnimplementedEventServiceServer) UpdateEvent(ctx context.Context, req *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEvent not implemented")
}
func (*UnimplementedEventServiceServer) DeleteEvent(ctx context.Context, req *request.ByID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEvent not implemented")
}
func (*UnimplementedEventServiceServer) ListEventsPerDate(ctx context.Context, req *request.ByDate) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventsPerDate not implemented")
}
func (*UnimplementedEventServiceServer) ListEventsPerWeek(ctx context.Context, req *request.ByDate) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventsPerWeek not implemented")
}
func (*UnimplementedEventServiceServer) ListEventsPerMonth(ctx context.Context, req *request.ByDate) (*ListEventsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEventsPerMonth not implemented")
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_CreateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).CreateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/CreateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).CreateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_GetEventByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).GetEventByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/GetEventByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).GetEventByID(ctx, req.(*request.ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UpdateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_DeleteEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ByID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).DeleteEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/DeleteEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).DeleteEvent(ctx, req.(*request.ByID))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ListEventsPerDate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ByDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ListEventsPerDate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/ListEventsPerDate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ListEventsPerDate(ctx, req.(*request.ByDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ListEventsPerWeek_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ByDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ListEventsPerWeek(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/ListEventsPerWeek",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ListEventsPerWeek(ctx, req.(*request.ByDate))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_ListEventsPerMonth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(request.ByDate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).ListEventsPerMonth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/event.EventService/ListEventsPerMonth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).ListEventsPerMonth(ctx, req.(*request.ByDate))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "event.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEvent",
			Handler:    _EventService_CreateEvent_Handler,
		},
		{
			MethodName: "GetEventByID",
			Handler:    _EventService_GetEventByID_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _EventService_UpdateEvent_Handler,
		},
		{
			MethodName: "DeleteEvent",
			Handler:    _EventService_DeleteEvent_Handler,
		},
		{
			MethodName: "ListEventsPerDate",
			Handler:    _EventService_ListEventsPerDate_Handler,
		},
		{
			MethodName: "ListEventsPerWeek",
			Handler:    _EventService_ListEventsPerWeek_Handler,
		},
		{
			MethodName: "ListEventsPerMonth",
			Handler:    _EventService_ListEventsPerMonth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/event.proto",
}
